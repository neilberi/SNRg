% Takes fit coeffs for template spacings over i and Tobs and fits them over
% fdot

clear;
clc;
close all;

ParsevalSNR = 1;

%% Read in template spacing fit coeffs
fitDegree = 1;

if (ParsevalSNR == 1)
    filename = sprintf('TemplateSpacingFitCoeffsfitDegree_%fP.csv', fitDegree);
else 
    filename = sprintf('TemplateSpacingFitCoeffsfitDegree_%f.csv', fitDegree);
end

FitCoeffs1 = readmatrix(filename);
fdotvec_sig = FitCoeffs1(:, 1);
fitCoeffs1 = FitCoeffs1(:, 2:2:end);
uncertainties1 = FitCoeffs1(:, 3:2:end);
NParams = length(fitCoeffs1(1, :));

%% Plot template spacing fit coeffs
for k = 1:NParams
    figure;
    ek = errorbar(log10(abs(fdotvec_sig)), fitCoeffs1(:, k), uncertainties1(:, k), '.k');
    titleString = sprintf('Template Spacing Fit Parameter a_{%d} vs fdot', k);
    title(titleString);
    xlabel('Base 10 log of fdot (log(Hz/s))');
    ylabel('Template Spacing Fit Param');
    ek.LineWidth = 2;
    ax = gca;
    ax.LineWidth = 3;
    ax.FontSize = 16;
    grid on;
end

%% Fit template spacing fit coeffs

lin_log_model = @(a, x) a(1).*log10(abs(x)) + a(2);
fdot_sigp = linspace(min(fdotvec_sig), max(fdotvec_sig), 1000);
fitParamfitParams = cell(NParams);

for k = 1:NParams
    [fitParamfitParams{k}, dParamParams] = fitChiSquare(fdotvec_sig, fitCoeffs1(:, k), lin_log_model, -rand(1, 2), zeros(size(fdotvec_sig)), uncertainties1(:, k));

    figure(k);
    hold on;
    pk = plot(log10(abs(fdot_sigp)), lin_log_model(fitParamfitParams{k}, fdot_sigp), '-r');
    legend('Calculated Params from const fdot', 'fit', 'Location', 'north');
    hold off;
end

%% Perform single fit on entire dataset

% Read in and configure data
Ntrials = 10;
X = [];
Y = [];
dY = [];
Tobsvecs = cell(length(fdotvec_sig));
Nsegvecs = Tobsvecs;
for j = 1:length(fdotvec_sig)
    fdot_sig = fdotvec_sig(j);
    Tcoh_hr = 1./3600.*sqrt(0.5/abs(fdot_sig));
    Tcoh = Tcoh_hr * 3600.;
    Tcoh = floor(Tcoh);
    Tcoh_hr = Tcoh/3600.;
    if (ParsevalSNR == 0)
        filenameIn = sprintf('SNRgTemplateSpacingfdot_%0.e.csv', fdot_sig);
    else
        filenameIn = sprintf('SNRgTemplateSpacingfdot_%0.eP.csv', fdot_sig);
    end

    Data = readmatrix(filenameIn);
    Tobsvecs{j} = unique(Data(:, 1));
    Nsegvecs{j} = round(Tobsvecs{j}./Tcoh_hr);
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            X = [X; log10(abs(fdot_sig)), log10(Tobsvecs{j}(k)), log10(i)];
            dataIndices = logical((Data(:, 2)==i).*(Data(:, 1)==Tobsvecs{j}(k)));
            assert(sum(dataIndices)==Ntrials, ['Error: Incorrect number of trials for Tobs = ', num2str(Tobsvecs{j}(k)), ' hr and i = ', num2str(i)]);
            Y = [Y; log10(mean(Data(dataIndices, 3)))];
            dY = [dY; std(Data(dataIndices, 3))/mean(Data(dataIndices, 3))/log(10)/sqrt(Ntrials)];
        end
    end
end

% Do an additional fit to add to uncertainties
quad_model = @(a, x) a(1)*x.^2 + a(2)*x + a(3);
for j = 1:length(fdotvec_sig)
    for k = 1:length(Tobsvecs{j})
        dataIndices = logical((X(:, 1) == log10(abs(fdotvec_sig(j)))).*(X(:, 2) == log10(Tobsvecs{j}(k))));
        errorfitparams = nlinfit(X(dataIndices, 3), Y(dataIndices), quad_model, [-0.8311, -0.2004, -0.4803]);
        for i = 1:Nsegvecs{j}
            dataIndex = logical(dataIndices.*)
        end
    end
end

% Define model function and perform chi-squared minimization
model_func = @(a, X) (a(1) + a(2).*X(:, 1)).*X(:, 2) + ...
                     (a(3) + a(4).*X(:, 1)).*X(:, 3) + ...
                     (a(5) + a(6).*X(:, 1));

%[fitParams, dParams] = fitChiSquare(X, Y, model_func, [fitParamfitParams{1}, fitParamfitParams{2}, fitParamfitParams{3}], zeros(height(X), 3), dY);
[fitCoeffs, R, J, Cov, MSE, ErrorModelInfo] = nlinfit(X, Y, model_func, [fitParamfitParams{1}, fitParamfitParams{2}, fitParamfitParams{3}], 'Weights', 1./dY);

% Plot data points and fits on surfaces of constant fdot
model_func2 = @(a, fdot, Tobs, i) (a(1) + a(2).*fdot).*Tobs + ...
                                  (a(3) + a(4).*fdot).*i + ...
                                  (a(5) + a(6).*fdot);

modelmats = cell(length(fdotvec_sig));
for k = 1:length(fdotvec_sig)
    [Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{k})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
    modelmats{k} = model_func2(fitParams, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    
    figure;
    s1000 = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*m');
    hold on;
    sf1000 = surf(Tobsmat, imat, modelmats{k});
    title(['Template Spacing over Tobs and i for fdot = -5.e', num2str(log10(abs(fdotvec_sig(k))/5)), ' Hz/s']);
    xlabel('log(Tobs) (log(hr))');
    ylabel('log(i)');
    zlabel('log(dfdot) (log(Hz/s))');
    grid on;
    s1000.LineWidth = 3;
    sf1000.EdgeAlpha = 0.5;
    ax = gca; 
    ax.LineWidth = 3;
    ax.FontSize = 16;
    hold off;
end
