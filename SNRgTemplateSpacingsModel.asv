% Takes Template Spacings and SNRgs and fits them to model

clear;
clc;
close all;

ParsevalSNR = 1;
PlotChiSqrContributions = 0;
PlotConstFdot = 0;
CrossTerms = 0;
SaveParams = 0;



%% Fit f Template Spacings

% Read in and configure data
fdotvec_sig = -5.*10.^(-9:-5);
Ntrials = 10;
X = [];
Y = [];
dY = [];
Tobsvecs = cell(1, length(fdotvec_sig));
Nsegvecs = Tobsvecs;
for j = 1:length(fdotvec_sig)
    fdot_sig = fdotvec_sig(j);
    Tcoh_hr = 1./3600.*sqrt(0.5/abs(fdot_sig));
    Tcoh = Tcoh_hr * 3600.;
    Tcoh = floor(Tcoh);
    Tcoh_hr = Tcoh/3600.;
    if (ParsevalSNR == 0)
        filenameIn = sprintf('SNRgfTemplateSpacingfdot_%0.e.csv', fdot_sig);
    else
        filenameIn = sprintf('SNRgfTemplateSpacingfdot_%0.eP.csv', fdot_sig);
    end

    Data = readmatrix(filenameIn);
    Tobsvecs{j} = unique(Data(:, 1));
    Nsegvecs{j} = round(Tobsvecs{j}./Tcoh_hr);
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            X = [X; log10(abs(fdot_sig)), log10(Tobsvecs{j}(k)), log10(i)];
            dataIndices = logical((Data(:, 2)==i).*(Data(:, 1)==Tobsvecs{j}(k)));
            assert(sum(dataIndices)==Ntrials, ['Error: Incorrect number of trials for Tobs = ', num2str(Tobsvecs{j}(k)), ' hr and i = ', num2str(i)]);
            Y = [Y; log10(mean(Data(dataIndices, 3)))];
            dY = [dY; std(Data(dataIndices, 3))/mean(Data(dataIndices, 3))/log(10)/sqrt(Ntrials)];
        end
    end
end

% Do additional fits to add to uncertainties
plane_model = @(a, X) a(1).*X(:, 1) + a(2).*X(:, 2) + a(3);
plane_fitParams = zeros(length(fdotvec_sig), 3);
for j = 1:length(fdotvec_sig)
    dataIndices = logical(X(:, 1) == log10(abs(fdotvec_sig(j))));
    plane_fitParams(j, :) = nlinfit(X(dataIndices, 2:3), Y(dataIndices), plane_model, -2*rand(1, 3));
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            dataIndex = logical(dataIndices .* (X(:, 3) == log10(i)) .* (X(:, 2) == log10(Tobsvecs{j}(k))));
            sysSigma = abs(Y(dataIndex) - plane_model(plane_fitParams(j, :), log10([Tobsvecs{j}(k), i])));
            dY(dataIndex) = sqrt(dY(dataIndex)^2 + sysSigma^2);
        end
    end
end

% Define model function and perform chi-squared minimization
lin_model = @(a, X) a(1) + a(2).*X(:);
initialFitParams = zeros(1, 4+2*CrossTerms);
for l = 1:3
    initialFitParams((2*l-1):(2*l)) = nlinfit(log10(abs(fdotvec_sig)), plane_fitParams(:, l), lin_model, -rand(1, 2));
end
if(CrossTerms == 0)
    initialFitParams = initialFitParams([1 3 6 5]);
end

model_func = @(a, X) a(1).*X(:, 2) + ...
                     a(2).*X(:, 3) + ...
                     a(3).*X(:, 1) + a(4);

options = optimset("Display", "off");
[fitParams_fTS, dParams_fTS, gof_fTS] = fitChiSquare(X, Y, model_func, initialFitParams, zeros(height(X), 3), dY, options);


% Plot data points and fits on surfaces of constant fdot
if (CrossTerms == 1)
    model_func2 = @(a, fdot_log, Tobs_log, i_log) (a(1) + a(2).*fdot_log).*Tobs_log + ...
                                                  (a(3) + a(4).*fdot_log).*i_log + ...
                                                  (a(5) + a(6).*fdot_log);
else
    model_func2 = @(a, fdot_log, Tobs_log, i_log) a(1).*Tobs_log + ...
                                                  a(2).*i_log + ...
                                                  a(3).*fdot_log + a(4);
end

modelmats = cell(length(fdotvec_sig));
for k = 1:length(fdotvec_sig)
    [Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{k})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
    modelmats{k} = model_func2(fitParams_fTS, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    
    if (PlotConstFdot == 1)
        figure;
        s1000 = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*m');
        hold on;
        sf1000 = surf(Tobsmat, imat, modelmats{k});
        title(['f Template Spacing over Tobs and i for fdot = -5.e', num2str(log10(abs(fdotvec_sig(k))/5)), ' Hz/s']);
        xlabel('log(Tobs) (log(hr))');
        ylabel('log(i)');
        zlabel('log(dfdot) (log(Hz/s))');
        grid on;
        s1000.LineWidth = 3;
        sf1000.EdgeAlpha = 0.5;
        ax = gca; 
        ax.LineWidth = 3;
        ax.FontSize = 16;
        hold off;
    end
end

% Plot Entire Dataset
[Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{1})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
s2000 = cell(1, length(fdotvec_sig));
sf2000 = s2000;
legends = s2000;
rainbows = {0.5*[1, 0, 0], 0.5*[1, 1, 0], 0.5*[0, 1, 0], 0.5*[0, 0, 1], 0.5*[1, 0, 1]};
rainbowsf = {'red', 'yellow', 'green', 'blue', 'magenta'};

figure;
hold on;
for k = 1:length(fdotvec_sig)
    modelmats{k} = model_func2(fitParams_fTS, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    s2000{k} = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*');
    sf2000{k} = surf(Tobsmat, imat, modelmats{k});
    s2000{k}.MarkerEdgeColor = rainbows{k};
    sf2000{k}.EdgeAlpha = 0.125;
    sf2000{k}.FaceAlpha = 0.25;
    sf2000{k}.FaceColor = rainbowsf{k};
    s2000{k}.LineWidth = 3;
    sf2000{k}.EdgeAlpha = 0.5;
    sf2000{k}.EdgeColor = rainbowsf{k};
    legends{k} = sprintf('fdot = %0.e Hz/s', fdotvec_sig(k));
end
legend([sf2000{1}, sf2000{2}, sf2000{3}, sf2000{4}, sf2000{5}], legends);
title('f Template Spacings Data (points) vs Model (surfaces)');
xlabel('log(Tobs) (log(hr))');
ylabel('log(i)');
zlabel('log(df) (log(Hz))');
grid on;
hold off;
ax = gca;
ax.LineWidth = 3;
ax.FontSize = 16;
view(45, 30);

% Calculate chi^2 contributions
if (PlotChiSqrContributions == 1)
    chisqrContributions = cell(1, length(fdotvec_sig));
    for j = 1:length(fdotvec_sig)
        chisqrContributions{j} = zeros(length(Tobsvecs{j}), Nsegvecs{j}(end));
        for k = 1:length(Tobsvecs{j})
            for i = 1:Nsegvecs{j}(k)
                dataIndex = logical( (X(:, 1) == log10(abs(fdotvec_sig(j)))) .* ...
                                     (X(:, 2) == log10(Tobsvecs{j}(k))) .* ...
                                     (X(:, 3) == log10(i)) );
                chisqrContributions{j}(k, i) = ((Y(dataIndex) - model_func(fitParams_fTS, X(dataIndex, :)))/dY(dataIndex))^2;
            end
        end
    end
    
    for j = 1:length(fdotvec_sig)
        [imat, Tobsmat] = meshgrid(1:Nsegvecs{j}(end), Tobsvecs{j});
        figure;
        sfk = surf(Tobsmat, imat, chisqrContributions{j});
        title(sprintf('Chi^2 Contributions from Each Data Point fdot = %2.e Hz/s', fdotvec_sig(j)));
        xlabel('Tobs (hr)');
        ylabel('i')
        ax = gca;
        ax.FontSize = 16;
        ax.LineWidth = 3;
        grid on;
    end
end

if (CrossTerms == 1)
    fprintf('log(TS_f) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_fTS(1), dParams_fTS(1).d);
    fprintf('\t(%f +/- %f)log(|fdot|)log(Tobs) +\n', fitParams_fTS(2), dParams_fTS(2).d);
    fprintf('\t(%f +/- %f)log(i) +\n', fitParams_fTS(3), dParams_fTS(3).d);
    fprintf('\t(%f +/- %f)log(|fdot|)log(i) +\n', fitParams_fTS(4), dParams_fTS(4).d);
    fprintf('\t(%f +/- %f) +\n', fitParams_fTS(5), dParams_fTS(5).d);
    fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_fTS(6), dParams_fTS(6).d);
else 
    fprintf('log(TS_f) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_fTS(1), dParams_fTS(1).d);
    fprintf('\t(%f +/- %f)log(i) +\n', fitParams_fTS(2), dParams_fTS(2).d);
    fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_fTS(3), dParams_fTS(3).d);
    fprintf('\t(%f +/- %f) +\n', fitParams_fTS(4), dParams_fTS(4).d);
end
fprintf('Chi^2 = %f\n', gof_fTS.chi2);
fprintf('Chi^2/dof = %f\n\n', gof_fTS.chi2/gof_fTS.dof);

%% Fit fdot Template Spacings

% Read in and configure data
X = [];
Y = [];
dY = [];
for j = 1:length(fdotvec_sig)
    fdot_sig = fdotvec_sig(j);
    Tcoh_hr = 1./3600.*sqrt(0.5/abs(fdot_sig));
    Tcoh = Tcoh_hr * 3600.;
    Tcoh = floor(Tcoh);
    Tcoh_hr = Tcoh/3600.;
    if (ParsevalSNR == 0)
        filenameIn = sprintf('SNRgfdotTemplateSpacingfdot_%0.e.csv', fdot_sig);
    else
        filenameIn = sprintf('SNRgfdotTemplateSpacingfdot_%0.eP.csv', fdot_sig);
    end

    Data = readmatrix(filenameIn);
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            X = [X; log10(abs(fdot_sig)), log10(Tobsvecs{j}(k)), log10(i)];
            dataIndices = logical((Data(:, 2)==i).*(Data(:, 1)==Tobsvecs{j}(k)));
            assert(sum(dataIndices)==Ntrials, ['Error: Incorrect number of trials for Tobs = ', num2str(Tobsvecs{j}(k)), ' hr and i = ', num2str(i)]);
            Y = [Y; log10(mean(Data(dataIndices, 3)))];
            dY = [dY; std(Data(dataIndices, 3))/mean(Data(dataIndices, 3))/log(10)/sqrt(Ntrials)];
        end
    end
end

% Do additional fits to add to uncertainties
plane_model = @(a, X) a(1).*X(:, 1) + a(2).*X(:, 2) + a(3);
plane_fitParams = zeros(length(fdotvec_sig), 3);
for j = 1:length(fdotvec_sig)
    dataIndices = logical(X(:, 1) == log10(abs(fdotvec_sig(j))));
    plane_fitParams(j, :) = nlinfit(X(dataIndices, 2:3), Y(dataIndices), plane_model, -2*rand(1, 3));
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            dataIndex = logical(dataIndices .* (X(:, 3) == log10(i)) .* (X(:, 2) == log10(Tobsvecs{j}(k))));
            sysSigma = abs(Y(dataIndex) - plane_model(plane_fitParams(j, :), log10([Tobsvecs{j}(k), i])));
            dY(dataIndex) = sqrt(dY(dataIndex)^2 + sysSigma^2);
        end
    end
end

% Define model function and perform chi-squared minimization
lin_model = @(a, X) a(1) + a(2).*X(:);
initialFitParams = zeros(1, 4+2*CrossTerms);
for l = 1:3
    initialFitParams((2*l-1):(2*l)) = nlinfit(log10(abs(fdotvec_sig)), plane_fitParams(:, l), lin_model, -rand(1, 2));
end
if(CrossTerms == 0)
    initialFitParams = initialFitParams([1 3 6 5]);
end

model_func = @(a, X) a(1).*X(:, 2) + ...
                     a(2).*X(:, 3) + ...
                     a(3).*X(:, 1) + a(4);

options = optimset("Display", "off");
[fitParams_fdotTS, dParams_fdotTS, gof_fdotTS] = fitChiSquare(X, Y, model_func, initialFitParams, zeros(height(X), 3), dY, options);


% Plot data points and fits on surfaces of constant fdot
if (CrossTerms == 1)
    model_func2 = @(a, fdot_log, Tobs_log, i_log) (a(1) + a(2).*fdot_log).*Tobs_log + ...
                                                  (a(3) + a(4).*fdot_log).*i_log + ...
                                                  (a(5) + a(6).*fdot_log);
else
    model_func2 = @(a, fdot_log, Tobs_log, i_log) a(1).*Tobs_log + ...
                                                  a(2).*i_log + ...
                                                  a(3).*fdot_log + a(4);
end

modelmats = cell(length(fdotvec_sig));
for k = 1:length(fdotvec_sig)
    [Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{k})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
    modelmats{k} = model_func2(fitParams_fdotTS, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    
    if (PlotConstFdot == 1)
        figure;
        s1000 = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*m');
        hold on;
        sf1000 = surf(Tobsmat, imat, modelmats{k});
        title(['fdot Template Spacing over Tobs and i for fdot = -5.e', num2str(log10(abs(fdotvec_sig(k))/5)), ' Hz/s']);
        xlabel('log(Tobs) (log(hr))');
        ylabel('log(i)');
        zlabel('log(dfdot) (log(Hz/s))');
        grid on;
        s1000.LineWidth = 3;
        sf1000.EdgeAlpha = 0.5;
        ax = gca; 
        ax.LineWidth = 3;
        ax.FontSize = 16;
        hold off;
    end
end

% Plot Entire Dataset
[Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{1})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
s2000 = cell(1, length(fdotvec_sig));
sf2000 = s2000;
legends = s2000;

figure;
hold on;
for k = 1:length(fdotvec_sig)
    modelmats{k} = model_func2(fitParams_fdotTS, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    s2000{k} = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*');
    sf2000{k} = surf(Tobsmat, imat, modelmats{k});
    s2000{k}.MarkerEdgeColor = rainbows{k};
    sf2000{k}.EdgeAlpha = 0.125;
    sf2000{k}.FaceAlpha = 0.25;
    sf2000{k}.FaceColor = rainbowsf{k};
    s2000{k}.LineWidth = 3;
    sf2000{k}.EdgeAlpha = 0.5;
    sf2000{k}.EdgeColor = rainbowsf{k};
    legends{k} = sprintf('fdot = %0.e Hz/s', fdotvec_sig(k));
end
legend([sf2000{1}, sf2000{2}, sf2000{3}, sf2000{4}, sf2000{5}], legends);
title('fdot Template Spacings Data (points) vs Model (surfaces)');
xlabel('log(Tobs) (log(hr))');
ylabel('log(i)');
zlabel('log(dfdot) (log(Hz/s))');
grid on;
hold off;
ax = gca;
ax.LineWidth = 3;
ax.FontSize = 16;
view(45, 30);

% Calculate chi^2 contributions
if (PlotChiSqrContributions == 1)
    chisqrContributions = cell(1, length(fdotvec_sig));
    for j = 1:length(fdotvec_sig)
        chisqrContributions{j} = zeros(length(Tobsvecs{j}), Nsegvecs{j}(end));
        for k = 1:length(Tobsvecs{j})
            for i = 1:Nsegvecs{j}(k)
                dataIndex = logical( (X(:, 1) == log10(abs(fdotvec_sig(j)))) .* ...
                                     (X(:, 2) == log10(Tobsvecs{j}(k))) .* ...
                                     (X(:, 3) == log10(i)) );
                chisqrContributions{j}(k, i) = ((Y(dataIndex) - model_func(fitParams_fdotTS, X(dataIndex, :)))/dY(dataIndex))^2;
            end
        end
    end
    
    for j = 1:length(fdotvec_sig)
        [imat, Tobsmat] = meshgrid(1:Nsegvecs{j}(end), Tobsvecs{j});
        figure;
        sfk = surf(Tobsmat, imat, chisqrContributions{j});
        title(sprintf('Chi^2 Contributions from Each Data Point fdot = %2.e Hz/s', fdotvec_sig(j)));
        xlabel('Tobs (hr)');
        ylabel('i')
        ax = gca;
        ax.FontSize = 16;
        ax.LineWidth = 3;
        grid on;
    end
end

if (CrossTerms == 1)
    fprintf('log(TS_dfot) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_fdotTS(1), dParams_fdotTS(1).d);
    fprintf('\t(%f +/- %f)log(|fdot|)log(Tobs) +\n', fitParams_fdotTS(2), dParams_fdotTS(2).d);
    fprintf('\t(%f +/- %f)log(i) +\n', fitParams_fdotTS(3), dParams_fdotTS(3).d);
    fprintf('\t(%f +/- %f)log(|fdot|)log(i) +\n', fitParams_fdotTS(4), dParams_fdotTS(4).d);
    fprintf('\t(%f +/- %f) +\n', fitParams_fdotTS(5), dParams_fdotTS(5).d);
    fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_fdotTS(6), dParams_fdotTS(6).d);
else 
    fprintf('log(TS_fdot) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_fdotTS(1), dParams_fdotTS(1).d);
    fprintf('\t(%f +/- %f)log(i) +\n', fitParams_fdotTS(2), dParams_fdotTS(2).d);
    fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_fdotTS(3), dParams_fdotTS(3).d);
    fprintf('\t(%f +/- %f) +\n', fitParams_fdotTS(4), dParams_fdotTS(4).d);
end
fprintf('Chi^2 = %f\n', gof_fdotTS.chi2);
fprintf('Chi^2/dof = %f\n\n', gof_fdotTS.chi2/gof_fdotTS.dof);

%% Fit SNRg Values

% Read in and configure data
X = [];
Y = [];
dY = [];
for j = 1:length(fdotvec_sig)
    fdot_sig = fdotvec_sig(j);
    Tcoh_hr = 1./3600.*sqrt(0.5/abs(fdot_sig));
    Tcoh = Tcoh_hr * 3600.;
    Tcoh = floor(Tcoh);
    Tcoh_hr = Tcoh/3600.;
    for k = 1:length(Tobsvecs{j})
        if (ParsevalSNR == 1)
            filename1 = sprintf('SNRgfdot_%0.es-2Tobs_%0.fhrnoiseamp_%.2esqrt(s)sigamp_%.2eP.csv', fdot_sig, Tobs_hr, hnoise, hamp);
        else
            filename1 = sprintf('SNRgfdot_%0.es-2Tobs_%0.fhrnoiseamp_%.2esqrt(s)sigamp_%.2e.csv', fdot_sig, Tobs_hr, hnoise, hamp);
        end
        Data = readmatrix(filenameIn);
        assert(height(Data)==Ntrials, ['Error: Incorrect number of trials for Tobs = ', num2str(Tobsvecs{j}(k)), ' hr\n']);
        for i = 1:Nsegvecs{j}(k)
            X = [X; log10(abs(fdot_sig)), log10(Tobsvecs{j}(k)), log10(i)];
            Y = [Y; log10(mean(Data(:, i)))];
            dY = [dY; std(Data(:, i))/mean(Data(:, i))/log(10)/sqrt(Ntrials)];
        end
    end
end

% Do additional fits to add to uncertainties
plane_model = @(a, X) a(1).*X(:, 1) + a(2).*X(:, 2) + a(3);
plane_fitParams = zeros(length(fdotvec_sig), 3);
for j = 1:length(fdotvec_sig)
    dataIndices = logical(X(:, 1) == log10(abs(fdotvec_sig(j))));
    plane_fitParams(j, :) = nlinfit(X(dataIndices, 2:3), Y(dataIndices), plane_model, -2*rand(1, 3));
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            dataIndex = logical(dataIndices .* (X(:, 3) == log10(i)) .* (X(:, 2) == log10(Tobsvecs{j}(k))));
            sysSigma = abs(Y(dataIndex) - plane_model(plane_fitParams(j, :), log10([Tobsvecs{j}(k), i])));
            dY(dataIndex) = sqrt(dY(dataIndex)^2 + sysSigma^2);
        end
    end
end

% Define model function and perform chi-squared minimization
lin_model = @(a, X) a(1) + a(2).*X(:);
initialFitParams = zeros(1, 4+2*CrossTerms);
for l = 1:3
    initialFitParams((2*l-1):(2*l)) = nlinfit(log10(abs(fdotvec_sig)), plane_fitParams(:, l), lin_model, -rand(1, 2));
end
if(CrossTerms == 0)
    initialFitParams = initialFitParams([1 3 6 5]);
end

model_func = @(a, X) a(1).*X(:, 2) + ...
                     a(2).*X(:, 3) + ...
                     a(3).*X(:, 1) + a(4);

options = optimset("Display", "off");
[fitParams_SNR, dParams_SNR, gof_SNR] = fitChiSquare(X, Y, model_func, initialFitParams, zeros(height(X), 3), dY, options);


% Plot data points and fits on surfaces of constant fdot
if (CrossTerms == 1)
    model_func2 = @(a, fdot_log, Tobs_log, i_log) (a(1) + a(2).*fdot_log).*Tobs_log + ...
                                                  (a(3) + a(4).*fdot_log).*i_log + ...
                                                  (a(5) + a(6).*fdot_log);
else
    model_func2 = @(a, fdot_log, Tobs_log, i_log) a(1).*Tobs_log + ...
                                                  a(2).*i_log + ...
                                                  a(3)*fdot_log + a(4);
end

modelmats = cell(length(fdotvec_sig));
for k = 1:length(fdotvec_sig)
    [Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{k})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
    modelmats{k} = model_func2(fitParams_SNR, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    
    if (PlotConstFdot == 1)
        figure;
        s1000 = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*m');
        hold on;
        sf1000 = surf(Tobsmat, imat, modelmats{k});
        title(['SNRg_i over Tobs and i for fdot = -5.e', num2str(log10(abs(fdotvec_sig(k))/5)), ' Hz/s']);
        xlabel('log(Tobs) (log(hr))');
        ylabel('log(i)');
        zlabel('log(SNR)');
        grid on;
        s1000.LineWidth = 3;
        sf1000.EdgeAlpha = 0.5;
        ax = gca; 
        ax.LineWidth = 3;
        ax.FontSize = 16;
        hold off;
    end
end

% Plot Entire Dataset
[Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{1})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
s2000 = cell(1, length(fdotvec_sig));
sf2000 = s2000;
legends = s2000;

figure;
hold on;
for k = 1:length(fdotvec_sig)
    modelmats{k} = model_func2(fitParams_SNR, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    s2000{k} = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*');
    sf2000{k} = surf(Tobsmat, imat, modelmats{k});
    s2000{k}.MarkerEdgeColor = rainbows{k};
    sf2000{k}.EdgeAlpha = 0.125;
    sf2000{k}.FaceAlpha = 0.25;
    sf2000{k}.FaceColor = rainbowsf{k};
    s2000{k}.LineWidth = 3;
    sf2000{k}.EdgeAlpha = 0.5;
    sf2000{k}.EdgeColor = rainbowsf{k};
    legends{k} = sprintf('fdot = %0.e Hz/s', fdotvec_sig(k));
end
legend([sf2000{1}, sf2000{2}, sf2000{3}, sf2000{4}, sf2000{5}], legends);
title('SNRg_i Data (points) vs Model (surfaces)');
xlabel('log(Tobs) (log(hr))');
ylabel('log(i)');
zlabel('log(dfdot) (log(Hz/s))');
grid on;
hold off;
ax = gca;
ax.LineWidth = 3;
ax.FontSize = 16;
view(45, 30);

% Calculate chi^2 contributions
if (PlotChiSqrContributions == 1)
    chisqrContributions = cell(1, length(fdotvec_sig));
    for j = 1:length(fdotvec_sig)
        chisqrContributions{j} = zeros(length(Tobsvecs{j}), Nsegvecs{j}(end));
        for k = 1:length(Tobsvecs{j})
            for i = 1:Nsegvecs{j}(k)
                dataIndex = logical( (X(:, 1) == log10(abs(fdotvec_sig(j)))) .* ...
                                     (X(:, 2) == log10(Tobsvecs{j}(k))) .* ...
                                     (X(:, 3) == log10(i)) );
                chisqrContributions{j}(k, i) = ((Y(dataIndex) - model_func(fitParams_SNR, X(dataIndex, :)))/dY(dataIndex))^2;
            end
        end
    end
    
    for j = 1:length(fdotvec_sig)
        [imat, Tobsmat] = meshgrid(1:Nsegvecs{j}(end), Tobsvecs{j});
        figure;
        sfk = surf(Tobsmat, imat, chisqrContributions{j});
        title(sprintf('Chi^2 Contributions from Each Data Point fdot = %2.e Hz/s', fdotvec_sig(j)));
        xlabel('Tobs (hr)');
        ylabel('i');
        ax = gca;
        ax.FontSize = 16;
        ax.LineWidth = 3;
        grid on;
    end
end

if (CrossTerms == 1)
    fprintf('log(SNRg_i) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_SNR(1), dParams_SNR(1).d);
    fprintf('\t(%f +/- %f)log(|fdot|)log(Tobs) +\n', fitParams_SNR(2), dParams_SNR(2).d);
    fprintf('\t(%f +/- %f)log(i) +\n', fitParams_SNR(3), dParams_SNR(3).d);
    fprintf('\t(%f +/- %f)log(|fdot|)log(i) +\n', fitParams_SNR(4), dParams_SNR(4).d);
    fprintf('\t(%f +/- %f) +\n', fitParams_SNR(5), dParams_SNR(5).d);
    fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_SNR(6), dParams_SNR(6).d);
else 
    fprintf('log(SNRg_i) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_SNR(1), dParams_SNR(1).d);
    fprintf('\t(%f +/- %f)log(i) +\n', fitParams_SNR(2), dParams_SNR(2).d);
    fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_SNR(3), dParams_SNR(3).d);
    fprintf('\t(%f +/- %f) +\n', fitParams_SNR(4), dParams_SNR(4).d);
end
fprintf('Chi^2 = %f\n', gof_SNR.chi2);
fprintf('Chi^2/dof = %f\n\n', gof_SNR.chi2/gof_SNR.dof);

%% Analyze Template Computation Times

%{
% Read in and configure data
X = [];
Y = [];
dY = [];
filenameIn = 'SNRgTemplateComputationTimes.csv';
Data = readmatrix(filenameIn);
for j = 1:(length(fdotvec_sig)-1)
    fdot_sig = fdotvec_sig(j);
    Tcoh_hr = 1./3600.*sqrt(0.5/abs(fdot_sig));
    Tcoh = Tcoh_hr * 3600.;
    Tcoh = floor(Tcoh);
    Tcoh_hr = Tcoh/3600.;
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            dataIndices = logical((Data(:, 1) == Tobsvecs{j}(k)) .* (Data(:, 2) == i) .* (abs(Data(:, 3) - fdotvec_sig(j)) <= 1.e-16));
            if (sum(dataIndices) > 0)
                X = [X; log10(abs(fdot_sig)), log10(Tobsvecs{j}(k)), log10(i)];
                Y = [Y; log10(mean(Data(dataIndices, 4)))];
                if (sum(dataIndices) > 1)
                    dY = [dY; std(Data(dataIndices, 4))/mean(Data(dataIndices, 4))/log(10)/sqrt(sum(dataIndices))];
                else
                    dY = [dY; 0.03/mean(Data(dataIndices, 4))/log(10)/sqrt(sum(dataIndices))];
                end
            end
        end
    end
end

% Do additional fits to add to uncertainties
plane_model = @(a, X) a(1).*X(:, 1) + a(2).*X(:, 2) + a(3);
plane_fitParams = zeros(length(fdotvec_sig), 3);
for j = 1:length(fdotvec_sig)
    dataIndices = logical(X(:, 1) == log10(abs(fdotvec_sig(j))));
    if (dataIndices > 0)
        plane_fitParams(j, :) = nlinfit(X(dataIndices, 2:3), Y(dataIndices), plane_model, -2*rand(1, 3));
    end
    for k = 1:length(Tobsvecs{j})
        for i = 1:Nsegvecs{j}(k)
            dataIndex = logical(dataIndices .* (X(:, 3) == log10(i)) .* (X(:, 2) == log10(Tobsvecs{j}(k))));
            if (sum(dataIndex) > 0)
                sysSigma = abs(Y(dataIndex) - plane_model(plane_fitParams(j, :), log10([Tobsvecs{j}(k), i])));
                dY(dataIndex) = sqrt(dY(dataIndex)^2 + sysSigma^2);
            end
        end
    end
end

% Define model function and perform chi-squared minimization
lin_model = @(a, X) a(1) + a(2).*X(:);
initialFitParams = zeros(1, 4);
for l = 1:3
    initialFitParams((2*l-1):(2*l)) = nlinfit(log10(abs(fdotvec_sig)), plane_fitParams(:, l), lin_model, -rand(1, 2));
end
initialFitParams = initialFitParams([1 3 6 5]);

model_func = @(a, X) a(1).*X(:, 2) + ...
                     a(2).*X(:, 3) + ...
                     a(3).*X(:, 1) + a(4);

options = optimset("Display", "off");
[fitParams_Time, dParams_Time, gof_Time] = fitChiSquare(X, Y, model_func, initialFitParams, zeros(height(X), 3), dY, options);


% Plot data points and fits on surfaces of constant fdot
model_func2 = @(a, fdot_log, Tobs_log, i_log) a(1).*Tobs_log + ...
                                              a(2).*i_log + ...
                                              a(3)*fdot_log + a(4);

modelmats = cell(length(fdotvec_sig));
for k = 1:length(fdotvec_sig)
    [Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{k})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
    modelmats{k} = model_func2(fitParams_Time, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    
    if (PlotConstFdot == 1)
        figure;
        s1000 = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*m');
        hold on;
        sf1000 = surf(Tobsmat, imat, modelmats{k});
        title(['Computing Time over Tobs and i for fdot = -5.e', num2str(log10(abs(fdotvec_sig(k))/5)), ' Hz/s']);
        xlabel('log(Tobs) (log(hr))');
        ylabel('log(i)');
        zlabel('log(SNR)');
        grid on;
        s1000.LineWidth = 3;
        sf1000.EdgeAlpha = 0.5;
        ax = gca; 
        ax.LineWidth = 3;
        ax.FontSize = 16;
        hold off;
    end
end

% Plot Entire Dataset
[Tobsmat, imat] = meshgrid(linspace(log10(1), log10(max(Tobsvecs{1})), 100), linspace(log10(1), log10(max(Nsegvecs{k})), 100));
s2000 = cell(1, length(fdotvec_sig));
sf2000 = s2000;
legends = s2000;

figure;
hold on;
for k = 1:length(fdotvec_sig)
    modelmats{k} = model_func2(fitParams_Time, log10(abs(fdotvec_sig(k))), Tobsmat, imat);
    s2000{k} = scatter3(X(X(:, 1)==log10(abs(fdotvec_sig(k))), 2), X(X(:, 1)==log10(abs(fdotvec_sig(k))), 3), Y(X(:, 1)==log10(abs(fdotvec_sig(k)))), '*');
    sf2000{k} = surf(Tobsmat, imat, modelmats{k});
    s2000{k}.MarkerEdgeColor = rainbows{k};
    sf2000{k}.EdgeAlpha = 0.125;
    sf2000{k}.FaceAlpha = 0.25;
    sf2000{k}.FaceColor = rainbowsf{k};
    s2000{k}.LineWidth = 3;
    sf2000{k}.EdgeAlpha = 0.5;
    sf2000{k}.EdgeColor = rainbowsf{k};
    legends{k} = sprintf('fdot = %0.e Hz/s', fdotvec_sig(k));
end
legend([sf2000{1}, sf2000{2}, sf2000{3}, sf2000{4}, sf2000{5}], legends);
title('Computing Time Data (points) vs Model (surfaces)');
xlabel('log(Tobs) (log(hr))');
ylabel('log(i)');
zlabel('log(dfdot) (log(Hz/s))');
grid on;
hold off;
ax = gca;
ax.LineWidth = 3;
ax.FontSize = 16;
view(45, 30);

% Calculate chi^2 contributions
if (PlotChiSqrContributions == 1)
    chisqrContributions = cell(1, length(fdotvec_sig));
    for j = 1:length(fdotvec_sig)
        chisqrContributions{j} = zeros(length(Tobsvecs{j}), Nsegvecs{j}(end));
        for k = 1:length(Tobsvecs{j})
            for i = 1:Nsegvecs{j}(k)
                dataIndex = logical( (X(:, 1) == log10(abs(fdotvec_sig(j)))) .* ...
                                     (X(:, 2) == log10(Tobsvecs{j}(k))) .* ...
                                     (X(:, 3) == log10(i)) );
                chisqrContributions{j}(k, i) = ((Y(dataIndex) - model_func(fitParams_Time, X(dataIndex, :)))/dY(dataIndex))^2;
            end
        end
    end
    
    for j = 1:length(fdotvec_sig)
        [imat, Tobsmat] = meshgrid(1:Nsegvecs{j}(end), Tobsvecs{j});
        figure;
        sfk = surf(Tobsmat, imat, chisqrContributions{j});
        title(sprintf('Chi^2 Contributions from Each Data Point fdot = %2.e Hz/s', fdotvec_sig(j)));
        xlabel('Tobs (hr)');
        ylabel('i');
        ax = gca;
        ax.FontSize = 16;
        ax.LineWidth = 3;
        grid on;
    end
end

fprintf('log(CompTime) =\n\t(%f +/- %f)log(Tobs) +\n', fitParams_Time(1), dParams_Time(1).d);
fprintf('\t(%f +/- %f)log(i) +\n', fitParams_Time(2), dParams_Time(2).d);
fprintf('\t(%f +/- %f)log(|fdot|)\n', fitParams_Time(3), dParams_Time(3).d);
fprintf('\t(%f +/- %f) +\n', fitParams_Time(4), dParams_Time(4).d);

fprintf('Chi^2 = %f\n', gof_Time.chi2);
fprintf('Chi^2/dof = %f\n\n', gof_Time.chi2/gof_Time.dof);
%}
%% Save Fit Parameters

if (SaveParams == 1)
    writematrix([fitParams_fTS; fitParams_fdotTS; fitParams_SNR], 'SNRgModelParams.csv');
end